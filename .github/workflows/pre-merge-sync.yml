---
name: Pre-merge Lock Files Sync
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'package-lock.json'
      - 'ios/Podfile.lock'
      - 'package.json'
      - 'ios/Podfile'

env:
  NODE_VERSION: 20.13.1
  TERM: xterm

jobs:
  sync-lock-files:
    runs-on: ubuntu-22.04
    steps:
      - name: ci/checkout-target-branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: ci/configure-git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: ci/setup-node
        uses: actions/setup-node@a57c6165b6296b7582531f72318bb9966f708e20
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: ci/get-pr-info
        id: pr-info
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          PR_HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          PR_BASE_REF="${{ github.event.pull_request.base.ref }}"
          PR_HEAD_REF="${{ github.event.pull_request.head.ref }}"
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_USER="${{ github.event.pull_request.user.login }}"
          
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "pr_head_sha=$PR_HEAD_SHA" >> $GITHUB_OUTPUT
          echo "pr_base_ref=$PR_BASE_REF" >> $GITHUB_OUTPUT
          echo "pr_head_ref=$PR_HEAD_REF" >> $GITHUB_OUTPUT
          echo "pr_title=$PR_TITLE" >> $GITHUB_OUTPUT
          echo "pr_user=$PR_USER" >> $GITHUB_OUTPUT
          
          echo "Target branch: $PR_BASE_REF"
          echo "PR branch: $PR_HEAD_REF"
          echo "PR SHA: $PR_HEAD_SHA"

      - name: ci/fetch-and-sync-lock-files
        id: sync
        run: |
          PR_HEAD_SHA="${{ steps.pr-info.outputs.pr_head_sha }}"
          SYNCED_FILES=""
          FAILED_FILES=""
          
          declare -a FILES=("package-lock.json" "ios/Podfile.lock")
          
          for file in "${FILES[@]}"; do
            echo "Processing file: $file"
            
            if curl -s -f -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                    -H "Accept: application/vnd.github.v3.raw" \
                    -o "$file.tmp" \
                    "https://api.github.com/repos/${{ github.repository }}/contents/$file?ref=$PR_HEAD_SHA"; then
              
              # Проверяем, что файл не пустой
              if [[ -s "$file.tmp" ]]; then
                mkdir -p "$(dirname "$file")"
                mv "$file.tmp" "$file"
                SYNCED_FILES="$SYNCED_FILES $file"
                echo "Successfully synced: $file"
              else
                echo "Empty file, skipping: $file"
                rm -f "$file.tmp"
              fi
            else
              echo "File not found in PR or unchanged: $file"
              rm -f "$file.tmp"
            fi
          done
          
          echo "synced_files=$SYNCED_FILES" >> $GITHUB_OUTPUT
          echo "Synced files: $SYNCED_FILES"

      - name: ci/verify-package-lock
        if: contains(steps.sync.outputs.synced_files, 'package-lock.json')
        run: |
          echo "Verifying package-lock.json integrity..."
          
          if node -e "JSON.parse(require('fs').readFileSync('package-lock.json', 'utf8'))"; then
            echo "✅ package-lock.json is valid JSON"
          else
            echo "❌ package-lock.json is invalid, aborting sync"
            exit 1
          fi
          
          if [[ -f "package.json" ]]; then
            echo "Checking package.json compatibility..."
            npm ls --depth=0 > /dev/null 2>&1 || echo "Some dependency mismatches detected, but continuing..."
          fi

      - name: ci/verify-podfile-lock
        if: contains(steps.sync.outputs.synced_files, 'ios/Podfile.lock')
        run: |
          echo "Verifying Podfile.lock..."
          
          if [[ -f "ios/Podfile.lock" ]]; then
            echo "ios/Podfile.lock exists"
            
            if grep -q "PODS:" ios/Podfile.lock && grep -q "DEPENDENCIES:" ios/Podfile.lock; then
              echo "ios/Podfile.lock has valid structure"
            else
              echo "ios/Podfile.lock structure looks unusual, but continuing..."
            fi
          fi

      - name: ci/commit-and-push-changes
        run: |
          SYNCED_FILES="${{ steps.sync.outputs.synced_files }}"
          PR_NUMBER="${{ steps.pr-info.outputs.pr_number }}"
          PR_TITLE="${{ steps.pr-info.outputs.pr_title }}"
          PR_USER="${{ steps.pr-info.outputs.pr_user }}"
          BASE_REF="${{ steps.pr-info.outputs.pr_base_ref }}"
          
          if [[ -z "$SYNCED_FILES" ]]; then
            echo "No lock files to sync"
            exit 0
          fi
          
          if git diff --quiet $SYNCED_FILES 2>/dev/null; then
            echo "No changes detected in lock files"
            exit 0
          fi
          
          git add $SYNCED_FILES
          
          COMMIT_MSG="chore: sync lock files from PR #$PR_NUMBER

Automatically synced lock files from PR #$PR_NUMBER to prevent merge conflicts:
$SYNCED_FILES

This ensures that the target branch ($BASE_REF) has the latest lock file versions
to prevent merge conflicts.

PR: $PR_TITLE
Co-authored-by: $PR_USER <$PR_USER@users.noreply.github.com>"
          
          git commit -m "$COMMIT_MSG"
          git push origin "$BASE_REF"
          
          echo "✅ Successfully pushed lock file updates to $BASE_REF"

      - name: ci/comment-on-pr
        if: steps.sync.outputs.synced_files != ''
        uses: actions/github-script@v7
        with:
          script: |
            const syncedFiles = '${{ steps.sync.outputs.synced_files }}';
            const baseRef = '${{ steps.pr-info.outputs.pr_base_ref }}';
            
            if (!syncedFiles.trim()) return;
            
            const filesList = syncedFiles.trim().split(' ').map(f => `- \`${f}\``).join('\n');
            
            const message = `🔄 **Lock Files Auto-Sync**
            
The following lock files have been automatically synced from this PR to the target branch \`${baseRef}\` to prevent merge conflicts:

${filesList}

This happens automatically when lock files are modified in a PR to prevent merge conflicts.

**Next steps:**
- Lock files are now synchronized
- You can now merge without lock file conflicts  
- No action required from your side

**Workflow:** [View Details](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
            
            await github.rest.issues.createComment({
              issue_number: ${{ github.event.pull_request.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });